@using System.Diagnostics
@using System.IO
@using NLog.Targets
@inject ILogger<RegionOfLog> Logger
@inject ISnackbar Snackbar
@inject MemoryTarget MemoryTarget
<div class="pa-2" style="width:100%;height:100%">
    <MudPaper Class="pa-2" Width="100%" Height="100%" Outlined>
        <MudText Align="Align.Center" Typo="Typo.h6" Color="Color.Primary" Style="font-weight:600">日志</MudText>
        <MudDivider></MudDivider>
        @foreach (var item in logs)
        {
            <MudText Typo="Typo.subtitle2">
                @{
                    var (prefix, level, message) = ParseLog(item);
                }
                <span>@prefix</span>
                <MudText Inline="true" Color="@GetColor(level)">[@level]</MudText>
                <span>@message</span>
            </MudText>
        }
    </MudPaper>
</div>
@code {
    private List<string> logs = new List<string>();
    private string currentLogPath = string.Empty;
    private Timer? timer;
    protected override  void OnInitialized()
    {
        InitializeLogReader();
    }
    // 解析日志字符串
    private (string prefix, string level, string message) ParseLog(string log)
    {
        // 示例日志: "2025-03-21 16:34:12.1214 [INFO] 开始监控内存日志"
        int levelStart = log.IndexOf('[');
        int levelEnd = log.IndexOf(']');
        if (levelStart != -1 && levelEnd != -1 && levelEnd > levelStart)
        {
            string prefix = log.Substring(0, levelStart); // "2025-03-21 16:34:12.1214 "
            string level = log.Substring(levelStart + 1, levelEnd - levelStart - 1); // "INFO"
            string message = log.Substring(levelEnd + 1).Trim(); // " 开始监控内存日志"
            return (prefix, level, message);
        }
        return (log, "", ""); 
    }

    private Color GetColor(string level)
    {
        return level.ToUpper() switch
        {
            "INFO" => Color.Success,  // 绿色
            "ERROR" => Color.Error,   // 红色
            "WARN" => Color.Warning,  // 黄色
            "DEBUG" => Color.Info,    // 蓝色
            _ => Color.Default        // 默认颜色
        };
    }
    private void InitializeLogReader()
    {
        string dateStr = DateTime.Now.ToString("yyyyMMdd");
        //currentLogPath = Path.Combine(FileSystem.AppDataDirectory, "SerialSync", $"log-{dateStr}.txt");
        //await Read();

        logs = MemoryTarget.Logs.ToList();
        timer = new Timer(CheckForUpdates, null, 1000, 1000);
        Logger.LogInformation("开始监控内存日志");
    }

    public async Task Read()
    {
        if (File.Exists(currentLogPath))
        {
            var result = await File.ReadAllLinesAsync(currentLogPath);
            logs = result.ToList();
            StateHasChanged(); // 初始加载时更新 UI
        }
    }
    private void CheckForUpdates(object? state)
    {
        var newLogs = MemoryTarget.Logs.ToList();
        if (newLogs.Count > logs.Count)
        {
            logs.AddRange(newLogs.Skip(logs.Count)); // 只添加新日志
            InvokeAsync(() => StateHasChanged());
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}