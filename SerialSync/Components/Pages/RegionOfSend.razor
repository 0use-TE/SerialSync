@using System.Diagnostics
@using System.Text
@inject IJSRuntime JSRuntime
@inject ILogger<RegionOfSend> Logger
@inject ISnackbar Snackbar
<div class="pa-2" style="width:100%;height:100%">
    <MudPaper  Width="100%" Height="100%" Outlined>
        <SplitContainer @bind-FirstPaneSize=Home.Layout.SendAndSended Style="width:100%;height:100%;" FirstPaneMinSize="5" SecondPaneMinSize="5"
        UnitOfPaneSize="UnitOfPaneSize.Percent" Orientation="SplitterOrientation.Horizontal" TSize="int" >
            <FirstPane>
                <div class="d-flex flex-column align-center  " style="width:100%;height:100%">
                    <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Primary" Style="font-weight:600">历史</MudText>    
                    @foreach (var item in Settings.SendedMsg)
                    {
                        <MudDivider Class="" Style="flex-grow:0"></MudDivider>
                        <MudStack Row   AlignItems="AlignItems.End" Style="width:100%;height:auto " Class="px-3">
                            <MudText  Typo="Typo.subtitle2" Align="Align.Start">@item.SendMsg</MudText>
                            <MudSpacer></MudSpacer>
                            <MudText Typo="Typo.subtitle2" Class="">
                                @($"{item.Span.Hours:D2}:{item.Span.Minutes:D2}")
                            </MudText>
                        </MudStack>
                    }
                    <MudDivider Class="" Style="flex-grow:0"></MudDivider>
                </div>


            </FirstPane>
            <SecondPane >
                <div class="d-flex flex-column pa-1" style="width:100%;height:100%" id="send"  @ref=container>
                    <MudTextField  Clearable ClearIcon="@Icons.Material.Outlined.DeleteOutline" @bind-value=Text Lines="TextLines"  Variant="Variant.Outlined" Label="请输入要发送的内容">
                    </MudTextField>
                    <div class="ml-auto">
                    <MudTooltip Arrow Color="Color.Secondary" Text="发送到设备!" >
                    <MudButton Class="" Color="Color.Primary"  Variant="Variant.Outlined" OnClick="Send">
                        发送
                    </MudButton>
                    </MudTooltip>
                    </div>
                </div>
            </SecondPane>
        </SplitContainer>
    </MudPaper>
</div>

@code
{
    [CascadingParameter]
    private Home Home { get; set; } = null!;
    private string? Text { get; set; }
    private int TextLines { get; set; } = 5;
    private ElementReference container;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await SecondPaneSize();
            await JSRuntime.InvokeVoidAsync("tools.addResizeListener",container,DotNetObjectReference.Create(this));
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Send()
    {
        var serialPort = Settings.MauiSerialPort;
        if(serialPort.IsOpen)
        {
            if (string.IsNullOrEmpty(Text))
            {
                Snackbar.Add("不能发送空的内容!", Severity.Error);
                Logger.LogError("用户发送了空的内容");
            }
            else
            {
                try
                {
                    Snackbar.Add("发送成功!", Severity.Success);
                    var content = Encoding.UTF8.GetBytes(Text);
                    serialPort.Write(content);
                    var sendModel = new SendModel
                        {
                            SendMsg = Text,
                            Span = DateTime.Now.TimeOfDay
                        };
                    Settings.SendedMsg.Add(sendModel);
                    Logger.LogInformation($"发送了内容:{Text}");
                }
                catch (Exception e)
                {
                    Snackbar.Add("异常发送!", Severity.Error);
                    Logger.LogError(e.Message);
                }
            }
        }
        else
        {
            Snackbar.Add("暂未选择串口!", Severity.Warning);
        }
    }
    private async Task SecondPaneSize()
    {
        var result = await GetSecondPaneHeight();
        Debug.WriteLine(result);
        TextLines = result / 30;
        Debug.WriteLine(TextLines);
        await InvokeAsync(StateHasChanged);
    }
    private async Task<int> GetSecondPaneHeight()
    {
        return await JSRuntime.InvokeAsync<int>("tools.getElementHeight", "send");
    }
    [JSInvokable]
    public async Task OnResize()
    {
        await SecondPaneSize();
    }
}