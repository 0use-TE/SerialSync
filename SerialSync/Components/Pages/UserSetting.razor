@using SerialSync.Components.Layout
@using SerialSync.Components.Reusable
@using SerialSync.Misc
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILogger<UserSetting> Logger
<div class="pa-1" style="height:100%">
	<MudPaper Outlined Class="pa-1 d-flex flex-column align-center" Width="100%" Height="100%">
		<MudText Align="Align.Center" Color="Color.Primary" Typo="Typo.h6" Style="font-weight:600">布局设置</MudText>
		<div style="flex-grow: 1; width: 100%; overflow-y: auto;">
			<MudButtonGroup FullWidth Variant="Variant.Outlined" Color="Color.Primary" Vertical="true">
				<MudButton Class="button" OnClick="LogIsRight">日志@("<->")设置</MudButton>
				<MudButton Class="button" OnClick="SendIsTop">接收@("<->")发送</MudButton>
				<MudButton Class="button" OnClick="UserSettingIsTop">串口@("<->")布局</MudButton>
				<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" FullWidth>
					<MudButton Class="button" OnClick="OpenLogFile">日志</MudButton>
					<MudButton Class="button" OnClick="MainLayout.ToggleTheme">明暗</MudButton>
				</MudButtonGroup>
				<MudButton Class="button" OnClick="ShowTutorial">新手须知</MudButton>
				<MudButton Class="button" OnClick="ShowMaker">开发者的....</MudButton>
			</MudButtonGroup>
		</div>
	</MudPaper>
</div>
@code
{
	[CascadingParameter]
	private Home Home { get; set; } = null!;
	[CascadingParameter]
	private MainLayout MainLayout { get; set; } = null!;
	public async Task LogIsRight()
	{
		Home.Layout.LogIsRight = !Home.Layout.LogIsRight;
		await Home.ReRender();
	}
	public async Task SendIsTop()
	{
		Home.Layout.SendIsTop = !Home.Layout.SendIsTop;
		await Home.ReRender();
	}
	public async Task UserSettingIsTop()
	{
		Home.Layout.UserSettingIsTop= !Home.Layout.UserSettingIsTop;
		await Home.ReRender();
	}
	public void OpenLogFile()
	{
		try
		{
			// 获取日志文件所在的目录
			string? logDirectory = Path.GetDirectoryName(Settings.LogPath);
			// 确保目录存在
			if (!Directory.Exists(logDirectory))
				Directory.CreateDirectory(Settings.LogPath); // 如果目录不存在，创建它

			// 在 Windows 上打开资源管理器
			System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
            {
                FileName = "explorer.exe",
                Arguments = logDirectory, // 打开指定目录
                UseShellExecute = true
            });
		}
		catch (Exception ex)
		{
			Snackbar.Add("打开日志目录失败!",Severity.Error);
			Logger.LogError("打开日志目录失败!"+ex.Message);
		}
	}
	public async Task ShowMaker() => await DialogService.ShowAsync<MakerDialog>("制作人", options: Settings.DialogOptions);
	public async Task ShowTutorial() => await DialogService.ShowAsync<NeedSeeDialog>("教程", options: Settings.DialogOptions);
}